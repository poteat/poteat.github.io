<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Typescript on Codeless Code</title>
    <link>https://code.lol/categories/typescript/</link>
    <description>Recent content in Typescript on Codeless Code</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Nov 2021 12:08:01 -0800</lastBuildDate>
    <atom:link href="https://code.lol/categories/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Type Guard Composition</title>
      <link>https://code.lol/post/programming/type-guard-composition/</link>
      <pubDate>Sun, 14 Nov 2021 12:08:01 -0800</pubDate>
      <guid>https://code.lol/post/programming/type-guard-composition/</guid>
      <description>&lt;p&gt;Building composable type guard systems in TypeScript where runtime validation seamlessly integrates with compile-time type narrowing. Type guards like &lt;code&gt;isString(x): x is string&lt;/code&gt; enable safe runtime checks, but composing them requires careful design. This explores combinators for union guards &lt;code&gt;or(isNumber, isString): x is number | string&lt;/code&gt;, intersection guards &lt;code&gt;and(hasName, hasAge): x is Person&lt;/code&gt;, and variadic patterns that preserve type inference. The result: elegant runtime validation that TypeScript&amp;rsquo;s control flow fully understands.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unchained Tuple Types</title>
      <link>https://code.lol/post/programming/unchained-tuple-types/</link>
      <pubDate>Sat, 09 Jan 2021 16:33:40 -0800</pubDate>
      <guid>https://code.lol/post/programming/unchained-tuple-types/</guid>
      <description>&lt;p&gt;Using TypeScript&amp;rsquo;s &lt;code&gt;asserts&lt;/code&gt; syntax to create imperative-style type mutations, moving beyond method chaining to more familiar iterative patterns for complex type operations.&lt;/p&gt;</description>
    </item>
    <item>
      <title>String Deduplication on the Type Level</title>
      <link>https://code.lol/post/programming/type-level-dedupe/</link>
      <pubDate>Sat, 09 Jan 2021 15:18:24 -0800</pubDate>
      <guid>https://code.lol/post/programming/type-level-dedupe/</guid>
      <description>&lt;p&gt;Solving the classic string deduplication algorithm entirely within TypeScript&amp;rsquo;s type system using literal string types and recursive type manipulation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chained Tuple Types</title>
      <link>https://code.lol/post/programming/chained-tuple-types/</link>
      <pubDate>Tue, 05 Jan 2021 20:23:23 -0800</pubDate>
      <guid>https://code.lol/post/programming/chained-tuple-types/</guid>
      <description>&lt;p&gt;TypeScript 4.1&amp;rsquo;s variadic tuple types enable building complex type-safe data structures through method chaining, where each operation expands the chain&amp;rsquo;s type signature at compile time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Enforcing Function Map Constraints</title>
      <link>https://code.lol/post/programming/enforcing-function-map-constraints/</link>
      <pubDate>Wed, 16 Dec 2020 19:41:08 -0800</pubDate>
      <guid>https://code.lol/post/programming/enforcing-function-map-constraints/</guid>
      <description>&lt;p&gt;Exploring how to enforce type constraints across function maps in TypeScript, where every function must accept a specific parameter type.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Self Modifying Type Predicates in Typescript</title>
      <link>https://code.lol/post/programming/self-modifying-type-predicates/</link>
      <pubDate>Sun, 03 May 2020 19:41:57 -0700</pubDate>
      <guid>https://code.lol/post/programming/self-modifying-type-predicates/</guid>
      <description>&lt;p&gt;TypeScript&amp;rsquo;s type predicates can modify the type of &lt;code&gt;this&lt;/code&gt; itself, enabling self-modifying type behavior that approaches dependent types. By implementing &lt;code&gt;is&amp;lt;K extends keyof ShapeTypes&amp;gt;(type: K): this is ShapeTypes[K]&lt;/code&gt; on abstract classes, we achieve compile-time type narrowing where &lt;code&gt;shape.is(&#39;circle&#39;)&lt;/code&gt; transforms the &lt;code&gt;shape&lt;/code&gt; variable&amp;rsquo;s type from &lt;code&gt;Shape&lt;/code&gt; to &lt;code&gt;Circle&lt;/code&gt;, unlocking properties like &lt;code&gt;shape.radius&lt;/code&gt; within conditional blocks.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dijkstra&#39;s Shunting Yard in Typescript</title>
      <link>https://code.lol/post/algorithms/shunting-yard/</link>
      <pubDate>Mon, 23 Dec 2019 16:39:53 -0800</pubDate>
      <guid>https://code.lol/post/algorithms/shunting-yard/</guid>
      <description>&lt;p&gt;A functional TypeScript implementation of Dijkstra&amp;rsquo;s classic algorithm for parsing mathematical expressions, converting infix notation to reverse Polish notation for stack-based evaluation.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
