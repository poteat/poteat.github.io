<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Codeless Code</title>
    <link>https://code.lol/categories/programming/</link>
    <description>Recent content in Programming on Codeless Code</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Aug 2025 13:58:16 -0700</lastBuildDate>
    <atom:link href="https://code.lol/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Stub: Variational Selector Text Stenography</title>
      <link>https://code.lol/post/programming/llm-injection/</link>
      <pubDate>Sat, 23 Aug 2025 13:58:16 -0700</pubDate>
      <guid>https://code.lol/post/programming/llm-injection/</guid>
      <description>&lt;p&gt;This interactive tool demonstrates a steganographic technique using Unicode variation selectors (&lt;code&gt;U+E0100&lt;/code&gt;-&lt;code&gt;U+E017F&lt;/code&gt;) to encode hidden text within visible strings. By mapping ASCII characters to these invisible codepoints, messages can be embedded undetected - a potential vector for prompt injection attacks where LLMs may process hidden instructions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kind Reification</title>
      <link>https://code.lol/post/programming/kind-reification/</link>
      <pubDate>Tue, 07 Feb 2023 23:17:12 -0800</pubDate>
      <guid>https://code.lol/post/programming/kind-reification/</guid>
      <description>&lt;p&gt;The &lt;code&gt;hkt-toolbelt&lt;/code&gt; library introduces kind reification - transforming abstract type-level functions into concrete runtime signatures. This enables point-free programming where compositions like &lt;code&gt;Pipe&amp;lt;[Map&amp;lt;Inc&amp;gt;, Filter&amp;lt;IsEven&amp;gt;, Reduce&amp;lt;Add&amp;gt;]&amp;gt;&lt;/code&gt; become executable functions with 1:1 corresponding types. By bridging TypeScript&amp;rsquo;s type system with runtime code, we can write type-level pipelines that are both type-safe and actually invokable.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;to &lt;strong&gt;reify:&lt;/strong&gt; make (something abstract) more concrete or real.&lt;/p&gt;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Type-level Collatz Sequence</title>
      <link>https://code.lol/post/programming/type-level-collatz/</link>
      <pubDate>Thu, 08 Dec 2022 22:58:35 -0800</pubDate>
      <guid>https://code.lol/post/programming/type-level-collatz/</guid>
      <description>&lt;p&gt;Implementing the famous Collatz conjecture entirely within TypeScript&amp;rsquo;s type system, demonstrating type-level arithmetic and recursive computation. The sequence follows $n \rightarrow n/2$ if even, $n \rightarrow 3n+1$ if odd, conjecturing all positive integers reach 1. Using template literal types and conditional type recursion, we can compute &lt;code&gt;Collatz&amp;lt;27&amp;gt;&lt;/code&gt; yielding the 111-step sequence purely at compile time - pushing TypeScript&amp;rsquo;s type system to perform actual mathematical computation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Typesafe Function Composition</title>
      <link>https://code.lol/post/programming/typesafe-function-composition/</link>
      <pubDate>Sun, 09 Oct 2022 16:45:40 -0700</pubDate>
      <guid>https://code.lol/post/programming/typesafe-function-composition/</guid>
      <description>&lt;p&gt;This deep dive explores implementing mathematically-correct function composition with full type safety. We&amp;rsquo;ll build a &lt;code&gt;compose&lt;/code&gt; function where &lt;code&gt;compose&amp;lt;A, B, C&amp;gt;(f: B→C, g: A→B): A→C&lt;/code&gt; validates type compatibility at compile time, handle variadic arguments through recursive types, and ensure composed pipelines like &lt;code&gt;compose(toString, Math.sqrt, parseInt)&lt;/code&gt; automatically infer as &lt;code&gt;(s: string) =&amp;gt; string&lt;/code&gt; while preventing invalid compositions from compiling.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Towards a well-typed plugin architecture</title>
      <link>https://code.lol/post/programming/plugin-architecture/</link>
      <pubDate>Mon, 05 Sep 2022 12:03:54 -0700</pubDate>
      <guid>https://code.lol/post/programming/plugin-architecture/</guid>
      <description>&lt;p&gt;Designing a type-safe plugin system in TypeScript that maintains strong typing guarantees while allowing extensible functionality. Using discriminated unions and generic constraints, we can build plugin architectures where &lt;code&gt;registerPlugin&amp;lt;T extends Plugin&amp;gt;()&lt;/code&gt; enforces interface contracts at compile time. This approach enables dynamic feature extension while preserving full IDE support and preventing runtime type errors - useful for maintaining large-scale extensible applications.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A non-recursive type-level inclusion operator</title>
      <link>https://code.lol/post/programming/non-recursive-includes/</link>
      <pubDate>Sat, 27 Aug 2022 16:37:21 -0700</pubDate>
      <guid>https://code.lol/post/programming/non-recursive-includes/</guid>
      <description>&lt;p&gt;A performance-optimized, non-recursive implementation of a type-level array inclusion operator in TypeScript. By leveraging tuple spread syntax and conditional types instead of recursive patterns, we achieve &lt;code&gt;Includes&amp;lt;[1, 2, 3], 2&amp;gt;&lt;/code&gt; evaluation in O(1) type instantiation depth rather than O(n). This technique improves compile-time performance for large tuple operations, avoiding TypeScript&amp;rsquo;s recursion depth limits while maintaining the same type-level guarantees.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Point-free Programming via HKTs</title>
      <link>https://code.lol/post/programming/hkt-tacit/</link>
      <pubDate>Fri, 11 Mar 2022 09:34:39 -0800</pubDate>
      <guid>https://code.lol/post/programming/hkt-tacit/</guid>
      <description>&lt;p&gt;Implementing point-free (tacit) programming patterns in TypeScript using Higher Kinded Types to overcome traditional type system limitations. Point-free style eliminates explicit arguments, composing functions like &lt;code&gt;pipe(map(inc), filter(isEven), reduce(add))&lt;/code&gt; instead of &lt;code&gt;x =&amp;gt; x.map(inc).filter(isEven).reduce(add)&lt;/code&gt;. Through HKT encodings, we achieve true tacit programming where type inference flows through the entire pipeline, enabling cleaner functional abstractions without sacrificing TypeScript&amp;rsquo;s type safety.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Variadic HKT Composition</title>
      <link>https://code.lol/post/programming/variadic-hkt-composition/</link>
      <pubDate>Sat, 05 Mar 2022 00:17:15 -0800</pubDate>
      <guid>https://code.lol/post/programming/variadic-hkt-composition/</guid>
      <description>&lt;p&gt;Extending Higher Kinded Types with variadic composition patterns, enabling clean functional composition while preserving complete type information. Building on HKT foundations, this explores variadic compositions where &lt;code&gt;Compose&amp;lt;[F, G, H, ...]&amp;gt;&lt;/code&gt; handles arbitrary function chains with full type inference. Using advanced tuple manipulation and distributive conditional types, we achieve compositions like &lt;code&gt;pipe(map, flatten, filter, reduce)&lt;/code&gt; that maintain type safety across any number of transformations - a significant advancement in TypeScript&amp;rsquo;s functional programming capabilities.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Higher Kinded Types in Typescript</title>
      <link>https://code.lol/post/programming/higher-kinded-types/</link>
      <pubDate>Thu, 03 Mar 2022 22:18:42 -0800</pubDate>
      <guid>https://code.lol/post/programming/higher-kinded-types/</guid>
      <description>&lt;p&gt;A comprehensive introduction to Higher Kinded Types in TypeScript, exploring how to encode and utilize these powerful abstractions from functional programming. HKTs enable type constructors that take other type constructors as arguments - imagine &lt;code&gt;Functor&amp;lt;F&amp;gt;&lt;/code&gt; that works for any &lt;code&gt;F&amp;lt;T&amp;gt;&lt;/code&gt; whether it&amp;rsquo;s &lt;code&gt;Array&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Promise&amp;lt;T&amp;gt;&lt;/code&gt;, or &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;. Through encoding techniques using interface augmentation and symbol keys, we can simulate HKTs in TypeScript, making possible advanced functional patterns like monadic composition and type-safe algebraic structures previously impossible in the language.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programs of Length N: Collatz, Chaitin, and Church</title>
      <link>https://code.lol/post/programming/programs-of-length-n/</link>
      <pubDate>Fri, 03 Sep 2021 15:12:34 -0700</pubDate>
      <guid>https://code.lol/post/programming/programs-of-length-n/</guid>
      <description>&lt;p&gt;How many lambda calculus programs exist with exactly $N$ terms? This exploration dives into deep questions about computational complexity, from counting programs like &lt;code&gt;(λx. x x) (λx. x x)&lt;/code&gt; to analyzing the non-computable &lt;code&gt;BB(N)&lt;/code&gt; busy beaver function that grows faster than any computable sequence. We examine Chaitin&amp;rsquo;s constant $Ω$ and why determining program convergence connects to unsolved problems like the Collatz conjecture &lt;code&gt;collatz(3n + 1)&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
