<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Codeless Code</title>
    <link>https://code.lol/post/</link>
    <description>Recent content in Posts on Codeless Code</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Aug 2025 13:58:16 -0700</lastBuildDate>
    <atom:link href="https://code.lol/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Stub: Variational Selector Text Stenography</title>
      <link>https://code.lol/post/programming/llm-injection/</link>
      <pubDate>Sat, 23 Aug 2025 13:58:16 -0700</pubDate>
      <guid>https://code.lol/post/programming/llm-injection/</guid>
      <description>&lt;p&gt;This interactive tool demonstrates a steganographic technique using Unicode variation selectors (&lt;code&gt;U+E0100&lt;/code&gt;-&lt;code&gt;U+E017F&lt;/code&gt;) to encode hidden text within visible strings. By mapping ASCII characters to these invisible codepoints, messages can be embedded undetected - a potential vector for prompt injection attacks where LLMs may process hidden instructions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kind Reification</title>
      <link>https://code.lol/post/programming/kind-reification/</link>
      <pubDate>Tue, 07 Feb 2023 23:17:12 -0800</pubDate>
      <guid>https://code.lol/post/programming/kind-reification/</guid>
      <description>&lt;p&gt;The &lt;code&gt;hkt-toolbelt&lt;/code&gt; library introduces kind reification - transforming abstract type-level functions into concrete runtime signatures. This enables point-free programming where compositions like &lt;code&gt;Pipe&amp;lt;[Map&amp;lt;Inc&amp;gt;, Filter&amp;lt;IsEven&amp;gt;, Reduce&amp;lt;Add&amp;gt;]&amp;gt;&lt;/code&gt; become executable functions with 1:1 corresponding types. By bridging TypeScript&amp;rsquo;s type system with runtime code, we can write type-level pipelines that are both type-safe and actually invokable.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;to &lt;strong&gt;reify:&lt;/strong&gt; make (something abstract) more concrete or real.&lt;/p&gt;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Type-level Collatz Sequence</title>
      <link>https://code.lol/post/programming/type-level-collatz/</link>
      <pubDate>Thu, 08 Dec 2022 22:58:35 -0800</pubDate>
      <guid>https://code.lol/post/programming/type-level-collatz/</guid>
      <description>&lt;p&gt;Implementing the famous Collatz conjecture entirely within TypeScript&amp;rsquo;s type system, demonstrating type-level arithmetic and recursive computation. The sequence follows $n \rightarrow n/2$ if even, $n \rightarrow 3n+1$ if odd, conjecturing all positive integers reach 1. Using template literal types and conditional type recursion, we can compute &lt;code&gt;Collatz&amp;lt;27&amp;gt;&lt;/code&gt; yielding the 111-step sequence purely at compile time - pushing TypeScript&amp;rsquo;s type system to perform actual mathematical computation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Typesafe Function Composition</title>
      <link>https://code.lol/post/programming/typesafe-function-composition/</link>
      <pubDate>Sun, 09 Oct 2022 16:45:40 -0700</pubDate>
      <guid>https://code.lol/post/programming/typesafe-function-composition/</guid>
      <description>&lt;p&gt;This deep dive explores implementing mathematically-correct function composition with full type safety. We&amp;rsquo;ll build a &lt;code&gt;compose&lt;/code&gt; function where &lt;code&gt;compose&amp;lt;A, B, C&amp;gt;(f: B→C, g: A→B): A→C&lt;/code&gt; validates type compatibility at compile time, handle variadic arguments through recursive types, and ensure composed pipelines like &lt;code&gt;compose(toString, Math.sqrt, parseInt)&lt;/code&gt; automatically infer as &lt;code&gt;(s: string) =&amp;gt; string&lt;/code&gt; while preventing invalid compositions from compiling.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Towards a well-typed plugin architecture</title>
      <link>https://code.lol/post/programming/plugin-architecture/</link>
      <pubDate>Mon, 05 Sep 2022 12:03:54 -0700</pubDate>
      <guid>https://code.lol/post/programming/plugin-architecture/</guid>
      <description>&lt;p&gt;Designing a type-safe plugin system in TypeScript that maintains strong typing guarantees while allowing extensible functionality. Using discriminated unions and generic constraints, we can build plugin architectures where &lt;code&gt;registerPlugin&amp;lt;T extends Plugin&amp;gt;()&lt;/code&gt; enforces interface contracts at compile time. This approach enables dynamic feature extension while preserving full IDE support and preventing runtime type errors - useful for maintaining large-scale extensible applications.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A non-recursive type-level inclusion operator</title>
      <link>https://code.lol/post/programming/non-recursive-includes/</link>
      <pubDate>Sat, 27 Aug 2022 16:37:21 -0700</pubDate>
      <guid>https://code.lol/post/programming/non-recursive-includes/</guid>
      <description>&lt;p&gt;A performance-optimized, non-recursive implementation of a type-level array inclusion operator in TypeScript. By leveraging tuple spread syntax and conditional types instead of recursive patterns, we achieve &lt;code&gt;Includes&amp;lt;[1, 2, 3], 2&amp;gt;&lt;/code&gt; evaluation in O(1) type instantiation depth rather than O(n). This technique improves compile-time performance for large tuple operations, avoiding TypeScript&amp;rsquo;s recursion depth limits while maintaining the same type-level guarantees.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Point-free Programming via HKTs</title>
      <link>https://code.lol/post/programming/hkt-tacit/</link>
      <pubDate>Fri, 11 Mar 2022 09:34:39 -0800</pubDate>
      <guid>https://code.lol/post/programming/hkt-tacit/</guid>
      <description>&lt;p&gt;Implementing point-free (tacit) programming patterns in TypeScript using Higher Kinded Types to overcome traditional type system limitations. Point-free style eliminates explicit arguments, composing functions like &lt;code&gt;pipe(map(inc), filter(isEven), reduce(add))&lt;/code&gt; instead of &lt;code&gt;x =&amp;gt; x.map(inc).filter(isEven).reduce(add)&lt;/code&gt;. Through HKT encodings, we achieve true tacit programming where type inference flows through the entire pipeline, enabling cleaner functional abstractions without sacrificing TypeScript&amp;rsquo;s type safety.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Variadic HKT Composition</title>
      <link>https://code.lol/post/programming/variadic-hkt-composition/</link>
      <pubDate>Sat, 05 Mar 2022 00:17:15 -0800</pubDate>
      <guid>https://code.lol/post/programming/variadic-hkt-composition/</guid>
      <description>&lt;p&gt;Extending Higher Kinded Types with variadic composition patterns, enabling clean functional composition while preserving complete type information. Building on HKT foundations, this explores variadic compositions where &lt;code&gt;Compose&amp;lt;[F, G, H, ...]&amp;gt;&lt;/code&gt; handles arbitrary function chains with full type inference. Using advanced tuple manipulation and distributive conditional types, we achieve compositions like &lt;code&gt;pipe(map, flatten, filter, reduce)&lt;/code&gt; that maintain type safety across any number of transformations - a significant advancement in TypeScript&amp;rsquo;s functional programming capabilities.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Higher Kinded Types in Typescript</title>
      <link>https://code.lol/post/programming/higher-kinded-types/</link>
      <pubDate>Thu, 03 Mar 2022 22:18:42 -0800</pubDate>
      <guid>https://code.lol/post/programming/higher-kinded-types/</guid>
      <description>&lt;p&gt;A comprehensive introduction to Higher Kinded Types in TypeScript, exploring how to encode and utilize these powerful abstractions from functional programming. HKTs enable type constructors that take other type constructors as arguments - imagine &lt;code&gt;Functor&amp;lt;F&amp;gt;&lt;/code&gt; that works for any &lt;code&gt;F&amp;lt;T&amp;gt;&lt;/code&gt; whether it&amp;rsquo;s &lt;code&gt;Array&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Promise&amp;lt;T&amp;gt;&lt;/code&gt;, or &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;. Through encoding techniques using interface augmentation and symbol keys, we can simulate HKTs in TypeScript, making possible advanced functional patterns like monadic composition and type-safe algebraic structures previously impossible in the language.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Type Guard Composition</title>
      <link>https://code.lol/post/programming/type-guard-composition/</link>
      <pubDate>Sun, 14 Nov 2021 12:08:01 -0800</pubDate>
      <guid>https://code.lol/post/programming/type-guard-composition/</guid>
      <description>&lt;p&gt;Building composable type guard systems in TypeScript where runtime validation seamlessly integrates with compile-time type narrowing. Type guards like &lt;code&gt;isString(x): x is string&lt;/code&gt; enable safe runtime checks, but composing them requires careful design. This explores combinators for union guards &lt;code&gt;or(isNumber, isString): x is number | string&lt;/code&gt;, intersection guards &lt;code&gt;and(hasName, hasAge): x is Person&lt;/code&gt;, and variadic patterns that preserve type inference. The result: elegant runtime validation that TypeScript&amp;rsquo;s control flow fully understands.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programs of Length N: Collatz, Chaitin, and Church</title>
      <link>https://code.lol/post/programming/programs-of-length-n/</link>
      <pubDate>Fri, 03 Sep 2021 15:12:34 -0700</pubDate>
      <guid>https://code.lol/post/programming/programs-of-length-n/</guid>
      <description>&lt;p&gt;How many lambda calculus programs exist with exactly $N$ terms? This exploration dives into deep questions about computational complexity, from counting programs like &lt;code&gt;(λx. x x) (λx. x x)&lt;/code&gt; to analyzing the non-computable &lt;code&gt;BB(N)&lt;/code&gt; busy beaver function that grows faster than any computable sequence. We examine Chaitin&amp;rsquo;s constant $Ω$ and why determining program convergence connects to unsolved problems like the Collatz conjecture &lt;code&gt;collatz(3n + 1)&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unchained Tuple Types</title>
      <link>https://code.lol/post/programming/unchained-tuple-types/</link>
      <pubDate>Sat, 09 Jan 2021 16:33:40 -0800</pubDate>
      <guid>https://code.lol/post/programming/unchained-tuple-types/</guid>
      <description>&lt;p&gt;Using TypeScript&amp;rsquo;s &lt;code&gt;asserts&lt;/code&gt; syntax to create imperative-style type mutations, moving beyond method chaining to more familiar iterative patterns for complex type operations.&lt;/p&gt;</description>
    </item>
    <item>
      <title>String Deduplication on the Type Level</title>
      <link>https://code.lol/post/programming/type-level-dedupe/</link>
      <pubDate>Sat, 09 Jan 2021 15:18:24 -0800</pubDate>
      <guid>https://code.lol/post/programming/type-level-dedupe/</guid>
      <description>&lt;p&gt;Solving the classic string deduplication algorithm entirely within TypeScript&amp;rsquo;s type system using literal string types and recursive type manipulation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chained Tuple Types</title>
      <link>https://code.lol/post/programming/chained-tuple-types/</link>
      <pubDate>Tue, 05 Jan 2021 20:23:23 -0800</pubDate>
      <guid>https://code.lol/post/programming/chained-tuple-types/</guid>
      <description>&lt;p&gt;TypeScript 4.1&amp;rsquo;s variadic tuple types enable building complex type-safe data structures through method chaining, where each operation expands the chain&amp;rsquo;s type signature at compile time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Enforcing Function Map Constraints</title>
      <link>https://code.lol/post/programming/enforcing-function-map-constraints/</link>
      <pubDate>Wed, 16 Dec 2020 19:41:08 -0800</pubDate>
      <guid>https://code.lol/post/programming/enforcing-function-map-constraints/</guid>
      <description>&lt;p&gt;Exploring how to enforce type constraints across function maps in TypeScript, where every function must accept a specific parameter type.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Self Modifying Type Predicates in Typescript</title>
      <link>https://code.lol/post/programming/self-modifying-type-predicates/</link>
      <pubDate>Sun, 03 May 2020 19:41:57 -0700</pubDate>
      <guid>https://code.lol/post/programming/self-modifying-type-predicates/</guid>
      <description>&lt;p&gt;TypeScript&amp;rsquo;s type predicates can modify the type of &lt;code&gt;this&lt;/code&gt; itself, enabling self-modifying type behavior that approaches dependent types. By implementing &lt;code&gt;is&amp;lt;K extends keyof ShapeTypes&amp;gt;(type: K): this is ShapeTypes[K]&lt;/code&gt; on abstract classes, we achieve compile-time type narrowing where &lt;code&gt;shape.is(&#39;circle&#39;)&lt;/code&gt; transforms the &lt;code&gt;shape&lt;/code&gt; variable&amp;rsquo;s type from &lt;code&gt;Shape&lt;/code&gt; to &lt;code&gt;Circle&lt;/code&gt;, unlocking properties like &lt;code&gt;shape.radius&lt;/code&gt; within conditional blocks.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dijkstra&#39;s Shunting Yard in Typescript</title>
      <link>https://code.lol/post/algorithms/shunting-yard/</link>
      <pubDate>Mon, 23 Dec 2019 16:39:53 -0800</pubDate>
      <guid>https://code.lol/post/algorithms/shunting-yard/</guid>
      <description>&lt;p&gt;A functional TypeScript implementation of Dijkstra&amp;rsquo;s classic algorithm for parsing mathematical expressions, converting infix notation to reverse Polish notation for stack-based evaluation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bay Area SSC Meetup</title>
      <link>https://code.lol/post/life/ssc-meetup/</link>
      <pubDate>Mon, 03 Jun 2019 12:37:10 -0700</pubDate>
      <guid>https://code.lol/post/life/ssc-meetup/</guid>
      <description>&lt;p&gt;Attending the annual Slate Star Codex meetup in San Francisco&amp;rsquo;s Dolores Park, connecting with the rationalist community during my first summer in the Bay Area.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pythagorean Triple Problem in Sub-linear Time</title>
      <link>https://code.lol/post/algorithms/pythagorean-triple/</link>
      <pubDate>Sun, 10 Mar 2019 15:48:49 -0400</pubDate>
      <guid>https://code.lol/post/algorithms/pythagorean-triple/</guid>
      <description>&lt;p&gt;We explore a solution to finding Pythagorean triples with a product constraint, achieving O(√n) time complexity by reducing the problem to the well-known 3SUM problem.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mathematica Steps to LaTeX [WiP]</title>
      <link>https://code.lol/post/simulation/mathematica-steps-to-latex/</link>
      <pubDate>Fri, 01 Feb 2019 15:01:48 -0500</pubDate>
      <guid>https://code.lol/post/simulation/mathematica-steps-to-latex/</guid>
      <description>&lt;p&gt;Exploring methods to extract human-readable step-by-step solutions from Mathematica&amp;rsquo;s symbolic computation, addressing the black-box problem in automated mathematical derivation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Quadtree Particle Simulation</title>
      <link>https://code.lol/post/simulation/quadtree-particle-simulation/</link>
      <pubDate>Mon, 28 Jan 2019 13:59:19 -0500</pubDate>
      <guid>https://code.lol/post/simulation/quadtree-particle-simulation/</guid>
      <description>&lt;p&gt;A JavaScript particle physics simulation using a quadtree spatial data structure to efficiently compute inter-particle forces, optimizing from O(n²) to near-linear complexity.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Double Pendulum</title>
      <link>https://code.lol/post/simulation/double-pendulum/</link>
      <pubDate>Fri, 25 Jan 2019 20:58:30 -0500</pubDate>
      <guid>https://code.lol/post/simulation/double-pendulum/</guid>
      <description>&lt;p&gt;An interactive JavaScript simulation demonstrating the chaotic behavior of a double pendulum system, showcasing how small changes in initial conditions lead to dramatically different outcomes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Oriented Bounding-Box Heuristic</title>
      <link>https://code.lol/post/bioinformatics/oriented-bounding-box-heuristic/</link>
      <pubDate>Fri, 25 Jan 2019 20:35:20 -0500</pubDate>
      <guid>https://code.lol/post/bioinformatics/oriented-bounding-box-heuristic/</guid>
      <description>&lt;p&gt;A fast O(n) heuristic for finding near-optimal oriented bounding boxes around point sets, using orthogonal linear regression to align rectangles with the natural orientation of the data.&lt;/p&gt;</description>
    </item>
    <item>
      <title>2019 Presidential Luncheon</title>
      <link>https://code.lol/post/life/2019-presidential-luncheon/</link>
      <pubDate>Fri, 25 Jan 2019 18:58:29 -0500</pubDate>
      <guid>https://code.lol/post/life/2019-presidential-luncheon/</guid>
      <description>&lt;p&gt;A memorable meeting with ODU&amp;rsquo;s president as part of a Tau Beta Pi engineering honor society event.&lt;/p&gt;</description>
    </item>
    <item>
      <title>One-Dimensional Linear Regression</title>
      <link>https://code.lol/post/bioinformatics/one-dimensional-linear-regression/</link>
      <pubDate>Fri, 25 Jan 2019 18:27:02 -0500</pubDate>
      <guid>https://code.lol/post/bioinformatics/one-dimensional-linear-regression/</guid>
      <description>&lt;p&gt;An interactive demonstration of simple linear regression, showing how the least-squares method finds the best-fitting line through a set of data points by minimizing vertical distances.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Quadratic Bezier Curves</title>
      <link>https://code.lol/post/bioinformatics/quadratic-bezier-curves/</link>
      <pubDate>Fri, 25 Jan 2019 17:40:45 -0500</pubDate>
      <guid>https://code.lol/post/bioinformatics/quadratic-bezier-curves/</guid>
      <description>&lt;p&gt;An interactive visualization of quadratic Bézier curves, demonstrating how three control points define smooth parametric curves commonly used in computer graphics and design.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
