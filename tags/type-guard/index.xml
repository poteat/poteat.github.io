<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Type-Guard on Codeless Code</title>
    <link>https://code.lol/tags/type-guard/</link>
    <description>Recent content in Type-Guard on Codeless Code</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Nov 2021 12:08:01 -0800</lastBuildDate>
    <atom:link href="https://code.lol/tags/type-guard/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Type Guard Composition</title>
      <link>https://code.lol/post/programming/type-guard-composition/</link>
      <pubDate>Sun, 14 Nov 2021 12:08:01 -0800</pubDate>
      <guid>https://code.lol/post/programming/type-guard-composition/</guid>
      <description>&lt;p&gt;Building composable type guard systems in TypeScript where runtime validation seamlessly integrates with compile-time type narrowing. Type guards like &lt;code&gt;isString(x): x is string&lt;/code&gt; enable safe runtime checks, but composing them requires careful design. This explores combinators for union guards &lt;code&gt;or(isNumber, isString): x is number | string&lt;/code&gt;, intersection guards &lt;code&gt;and(hasName, hasAge): x is Person&lt;/code&gt;, and variadic patterns that preserve type inference. The result: elegant runtime validation that TypeScript&amp;rsquo;s control flow fully understands.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
