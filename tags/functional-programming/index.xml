<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functional Programming on Codeless Code</title>
    <link>https://code.lol/tags/functional-programming/</link>
    <description>Recent content in Functional Programming on Codeless Code</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Dec 2022 22:58:35 -0800</lastBuildDate>
    <atom:link href="https://code.lol/tags/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Type-level Collatz Sequence</title>
      <link>https://code.lol/post/programming/type-level-collatz/</link>
      <pubDate>Thu, 08 Dec 2022 22:58:35 -0800</pubDate>
      <guid>https://code.lol/post/programming/type-level-collatz/</guid>
      <description>&lt;p&gt;Implementing the famous Collatz conjecture entirely within TypeScript&amp;rsquo;s type system, demonstrating type-level arithmetic and recursive computation. The sequence follows $n \rightarrow n/2$ if even, $n \rightarrow 3n+1$ if odd, conjecturing all positive integers reach 1. Using template literal types and conditional type recursion, we can compute &lt;code&gt;Collatz&amp;lt;27&amp;gt;&lt;/code&gt; yielding the 111-step sequence purely at compile time - pushing TypeScript&amp;rsquo;s type system to perform actual mathematical computation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Typesafe Function Composition</title>
      <link>https://code.lol/post/programming/typesafe-function-composition/</link>
      <pubDate>Sun, 09 Oct 2022 16:45:40 -0700</pubDate>
      <guid>https://code.lol/post/programming/typesafe-function-composition/</guid>
      <description>&lt;p&gt;This deep dive explores implementing mathematically-correct function composition with full type safety. We&amp;rsquo;ll build a &lt;code&gt;compose&lt;/code&gt; function where &lt;code&gt;compose&amp;lt;A, B, C&amp;gt;(f: B→C, g: A→B): A→C&lt;/code&gt; validates type compatibility at compile time, handle variadic arguments through recursive types, and ensure composed pipelines like &lt;code&gt;compose(toString, Math.sqrt, parseInt)&lt;/code&gt; automatically infer as &lt;code&gt;(s: string) =&amp;gt; string&lt;/code&gt; while preventing invalid compositions from compiling.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
